// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0--rc3
// source: proto/forum.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ForumService_PublishMessage_FullMethodName       = "/forum.ForumService/PublishMessage"
	ForumService_SubscribeToTopic_FullMethodName     = "/forum.ForumService/SubscribeToTopic"
	ForumService_UnsubscribeFromTopic_FullMethodName = "/forum.ForumService/UnsubscribeFromTopic"
)

// ForumServiceClient is the client API for ForumService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ForumServiceClient interface {
	PublishMessage(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	SubscribeToTopic(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ForumService_SubscribeToTopicClient, error)
	UnsubscribeFromTopic(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error)
}

type forumServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewForumServiceClient(cc grpc.ClientConnInterface) ForumServiceClient {
	return &forumServiceClient{cc}
}

func (c *forumServiceClient) PublishMessage(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, ForumService_PublishMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *forumServiceClient) SubscribeToTopic(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (ForumService_SubscribeToTopicClient, error) {
	stream, err := c.cc.NewStream(ctx, &ForumService_ServiceDesc.Streams[0], ForumService_SubscribeToTopic_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &forumServiceSubscribeToTopicClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ForumService_SubscribeToTopicClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type forumServiceSubscribeToTopicClient struct {
	grpc.ClientStream
}

func (x *forumServiceSubscribeToTopicClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *forumServiceClient) UnsubscribeFromTopic(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (*UnsubscribeResponse, error) {
	out := new(UnsubscribeResponse)
	err := c.cc.Invoke(ctx, ForumService_UnsubscribeFromTopic_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForumServiceServer is the server API for ForumService service.
// All implementations must embed UnimplementedForumServiceServer
// for forward compatibility
type ForumServiceServer interface {
	PublishMessage(context.Context, *PublishRequest) (*PublishResponse, error)
	SubscribeToTopic(*SubscribeRequest, ForumService_SubscribeToTopicServer) error
	UnsubscribeFromTopic(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error)
	mustEmbedUnimplementedForumServiceServer()
}

// UnimplementedForumServiceServer must be embedded to have forward compatible implementations.
type UnimplementedForumServiceServer struct {
}

func (UnimplementedForumServiceServer) PublishMessage(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedForumServiceServer) SubscribeToTopic(*SubscribeRequest, ForumService_SubscribeToTopicServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToTopic not implemented")
}
func (UnimplementedForumServiceServer) UnsubscribeFromTopic(context.Context, *UnsubscribeRequest) (*UnsubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsubscribeFromTopic not implemented")
}
func (UnimplementedForumServiceServer) mustEmbedUnimplementedForumServiceServer() {}

// UnsafeForumServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ForumServiceServer will
// result in compilation errors.
type UnsafeForumServiceServer interface {
	mustEmbedUnimplementedForumServiceServer()
}

func RegisterForumServiceServer(s grpc.ServiceRegistrar, srv ForumServiceServer) {
	s.RegisterService(&ForumService_ServiceDesc, srv)
}

func _ForumService_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServiceServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForumService_PublishMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServiceServer).PublishMessage(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ForumService_SubscribeToTopic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForumServiceServer).SubscribeToTopic(m, &forumServiceSubscribeToTopicServer{stream})
}

type ForumService_SubscribeToTopicServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type forumServiceSubscribeToTopicServer struct {
	grpc.ServerStream
}

func (x *forumServiceSubscribeToTopicServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ForumService_UnsubscribeFromTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForumServiceServer).UnsubscribeFromTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ForumService_UnsubscribeFromTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForumServiceServer).UnsubscribeFromTopic(ctx, req.(*UnsubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ForumService_ServiceDesc is the grpc.ServiceDesc for ForumService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ForumService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "forum.ForumService",
	HandlerType: (*ForumServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishMessage",
			Handler:    _ForumService_PublishMessage_Handler,
		},
		{
			MethodName: "UnsubscribeFromTopic",
			Handler:    _ForumService_UnsubscribeFromTopic_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeToTopic",
			Handler:       _ForumService_SubscribeToTopic_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/forum.proto",
}
